#
# Developed by Alexandre Novello (PUC-Rio)
#

import os
import glob
from unittest import TestCase
import csv
from glamorise_nlidb import GlamoriseNlidb
from codetiming import Timer
from xml.etree.ElementTree import fromstring
import warnings


def ignore_warnings(test_func):
    def do_test(self, *args, **kwargs):
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            test_func(self, *args, **kwargs)
    return do_test

class TestGlamorise(TestCase):
    def __delete_db_files(self):        
        fileList = glob.glob('./datasets/glamorise_*.db')
        # Iterate over the list of filepaths & remove each file.
        for filePath in fileList:
            try:
                os.remove(filePath)
            except:
                print("Error while deleting file : ", filePath)

    @ignore_warnings
    def test_glamorise_mock_anp(self):        
        with open('./config/environment/glamorise_mock.json') as json_file:
            config_glamorise = json_file.read()

        with open('./config/environment/glamorise_interface_mock_danke_anp.json') as json_file:
            config_glamorise_interface = json_file.read()
        # set of questions to test
        with open('./nlqs/mock_nlidb_anp.nlqs.csv', encoding="utf-8") as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=';', quotechar="'")
            # jump the title line
            next(csv_reader)
            glamorise = GlamoriseNlidb(config_glamorise_param=config_glamorise,
                                       config_glamorise_interface_param=config_glamorise_interface)
            for row in csv_reader:
                # the NLQ is the first column of the CSV
                nl_query = row[0]
                glamorise.execute(nl_query)
                try:
                    # assert the NLQ generated by GLAMORISE to the NLIDB is equal to the expected value
                    # (second column of the CSV)
                    assert glamorise.pre_prepared_query.lower(
                    ) == row[1].lower()
                    print('passed prepared NLQ!')
                finally:
                    # print anyway, just for convenience (pytest cuts the string)
                    print('\nPrepared NLQ to NLIDB\nExpected: ',
                          row[1].lower())
                    print('Actual:   ', glamorise.pre_prepared_query.lower())
                try:
                    # assert the SQL generated by GLAMORISE is equal to the expected value
                    # (forth column of the CSV)
                    assert glamorise.pos_glamorise_sql.lower(
                    ) == row[3].lower()
                    print('passed GLAMORISE SQL!')
                finally:
                    # print anyway, just for convenience (pytest cuts the string)
                    print('\nGLAMORISE SQL\nExpected: ', row[3].lower())
                    print('Actual:   ', glamorise.pos_glamorise_sql.lower())

                    glamorise.print_timers()

            for (key, value) in Timer.timers.items():
                print("total {} : {:.2f} sec".format(key, value))
            del glamorise
            # for some reason the db files are not deleted in test mode
            # this method is to ensure they will be deleted
            self.__delete_db_files()
            csv_file.seek(1)
            print('{} NLQ questions tested'.format(
                sum(1 for line in csv_reader)))

    @ignore_warnings
    def test_glamorise_nalir_anp(self):        
        with open('./config/environment/nalir_tokens.xml') as xml_file:
            nalir_tokens = xml_file.read()
            nalir_tokens = fromstring(nalir_tokens)

        with open('./config/environment/nalir_anp_db.json') as json_file:
            config_db = json_file.read()

        with open('./config/environment/glamorise_nalir.json') as json_file:
            config_glamorise = json_file.read()

        with open('./config/environment/glamorise_interface_nalir_anp.json') as json_file:
            config_glamorise_interface = json_file.read()

        # set of questions to test
        with open('./nlqs/nalir_nlidb_anp.nlqs.csv', encoding="utf-8") as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=';', quotechar="'")
            # jump the title line
            next(csv_reader)
            glamorise = GlamoriseNlidb(NLIDB='NaLIR', config_glamorise_param=config_glamorise,
                           config_glamorise_interface_param=config_glamorise_interface, config_db=config_db, tokens=nalir_tokens)

            for row in csv_reader:
                # the NLQ is the first column of the CSV
                nl_query = row[0]
                glamorise.execute(nl_query)
                if row[5].lower() == 'failure':
                    continue
                try:
                    # assert the NLQ generated by GLAMORISE to the NLIDB is equal to the expected value
                    # (second column of the CSV)
                    assert glamorise.pre_prepared_query.lower(
                    ) == row[1].lower()
                    print('passed Prepared NLQ!')
                finally:
                    # print anyway, just for convenience (pytest cuts the string)
                    print('\nPrepared NLQ to NLIDB\nExpected: ',
                          row[1].lower())
                    print('Actual:   ', glamorise.pre_prepared_query.lower())
                try:
                    # assert the SQL generated by GLAMORISE is equal to the expected value
                    # (forth column of the CSV)
                    assert glamorise.pos_glamorise_sql.lower(
                    ) == row[3].lower()
                    print('passed GLAMORISE SQL!')
                finally:
                    # print anyway, just for convenience (pytest cuts the string)
                    print('\nGLAMORISE SQL\nExpected: ', row[3].lower())
                    print('Actual:   ', glamorise.pos_glamorise_sql.lower())

                    glamorise.print_timers()

            for (key, value) in Timer.timers.items():
                print("total {} : {:.2f} sec".format(key, value))
            del glamorise
            # for some reason the db files are not deleted in test mode
            # this method is to ensure they will be deleted
            self.__delete_db_files()
            csv_file.seek(1)
            print('{} NLQ questions tested'.format(
                sum(1 for line in csv_reader)))                
    @ignore_warnings
    def test_glamorise_nalir_mas(self):        
        with open('./config/environment/nalir_tokens.xml') as xml_file:
            nalir_tokens = xml_file.read()
            nalir_tokens = fromstring(nalir_tokens)

        with open('./config/environment/nalir_mas_db.json') as json_file:
            config_db = json_file.read()

        with open('./config/environment/glamorise_nalir.json') as json_file:
            config_glamorise = json_file.read()

        with open('./config/environment/glamorise_interface_nalir_mas.json') as json_file:
            config_glamorise_interface = json_file.read()

        # set of questions to test
        with open('./nlqs/nalir_nlidb_mas.nlqs.csv', encoding="utf-8") as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=';', quotechar='"')
            # jump the title line
            next(csv_reader)
            glamorise = GlamoriseNlidb(NLIDB='NaLIR', config_glamorise_param=config_glamorise,
                           config_glamorise_interface_param=config_glamorise_interface, config_db=config_db, tokens=nalir_tokens)

            for row in csv_reader:
                # the NLQ is the first column of the CSV
                nl_query = row[1]
                glamorise.execute(nl_query)
                if row[6].lower() == 'failure':
                    continue
                try:
                    # assert the NLQ generated by GLAMORISE to the NLIDB is equal to the expected value
                    # (second column of the CSV)
                    assert glamorise.pre_prepared_query.lower(
                    ) == row[2].lower()
                    print('passed Prepared NLQ!')
                finally:
                    # print anyway, just for convenience (pytest cuts the string)
                    print('\nPrepared NLQ to NLIDB\nExpected: ',
                          row[2].lower())
                    print('Actual:   ', glamorise.pre_prepared_query.lower())
                try:
                    # assert the SQL generated by GLAMORISE is equal to the expected value
                    # (forth column of the CSV)
                    assert glamorise.pos_glamorise_sql.lower(
                    ) == row[4].lower()
                    print('passed GLAMORISE SQL!')
                finally:
                    # print anyway, just for convenience (pytest cuts the string)
                    print('\nGLAMORISE SQL\nExpected: ', row[4].lower())
                    print('Actual:   ', glamorise.pos_glamorise_sql.lower())

                    glamorise.print_timers()

            for (key, value) in Timer.timers.items():
                print("total {} : {:.2f} sec".format(key, value))
            del glamorise
            # for some reason the db files are not deleted in test mode
            # this method is to ensure they will be deleted
            self.__delete_db_files()
            csv_file.seek(1)
            print('{} NLQ questions tested'.format(
                sum(1 for line in csv_reader)))     